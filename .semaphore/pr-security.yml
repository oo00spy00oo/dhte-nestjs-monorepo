version: v1.0
name: ZMA PR Security Pipeline
agent:
  machine:
    type: s1-unilab-02
    os_image: ''
global_job_config:
  env_vars:
    - name: SEMAPHORE_GIT_DEPTH
      value: '50'
  prologue:
    commands:
      - cd zma-nestjs-monorepo
blocks:
  - name: PR Security Setup
    skip:
      when: "pull_request !~ '.*'"
    dependencies: []
    task:
      jobs:
        - name: Setup Environment
          commands:
            - checkout
            - git fetch origin
            - |
              # Determine affected projects for PR
              BASE_SHA=$(git merge-base origin/$SEMAPHORE_GIT_BRANCH $SEMAPHORE_GIT_PR_SHA)
              HEAD_SHA=$SEMAPHORE_GIT_PR_SHA

              echo "BASE_SHA=$BASE_SHA" >> pr-security.env
              echo "HEAD_SHA=$HEAD_SHA" >> pr-security.env
              echo "GIT_COMMIT_SHORT=$(git rev-parse --short HEAD)" >> pr-security.env
            - artifact push workflow pr-security.env
  - name: PR Dependency Install
    skip:
      when: "pull_request !~ '.*'"
    dependencies:
      - PR Security Setup
    task:
      prologue:
        commands:
          - cache restore
          - artifact pull workflow pr-security.env
          - source pr-security.env
      jobs:
        - name: Install Dependencies
          commands:
            - pnpm install --frozen-lockfile
      epilogue:
        on_pass:
          commands:
            - cache store
  - name: PR Affected Detection
    skip:
      when: "pull_request !~ '.*'"
    dependencies:
      - PR Dependency Install
    task:
      jobs:
        - name: Detect PR Changes
          commands:
            - artifact pull workflow pr-security.env
            - source pr-security.env
            - |
              # Get affected projects for this PR
              ALL_AFFECTED=$(pnpm nx show projects --affected --type=app --base="$BASE_SHA" --head="$HEAD_SHA")
              AFFECTED_PROJECTS=$(echo "$ALL_AFFECTED" | grep -v "zma-sample" || echo "")

              echo "AFFECTED_PROJECTS=$AFFECTED_PROJECTS" >> pr-affected.env
              echo "PR Affected projects: $AFFECTED_PROJECTS"

              if [ -z "$AFFECTED_PROJECTS" ]; then
                echo "No affected projects in PR"
                echo "SKIP_PR_SECURITY=true" >> pr-affected.env
              else
                echo "SKIP_PR_SECURITY=false" >> pr-affected.env
              fi
            - artifact push workflow pr-affected.env
  - name: PR Code Security Scan
    skip:
      when: "pull_request !~ '.*'"
    dependencies:
      - PR Affected Detection
    task:
      prologue:
        commands:
          - artifact pull workflow pr-security.env
          - artifact pull workflow pr-affected.env
          - source pr-security.env
          - source pr-affected.env
      jobs:
        - name: Static Code Analysis
          commands:
            - |
              if [ "$SKIP_PR_SECURITY" = "true" ]; then
                echo "No affected projects, skipping static analysis"
                exit 0
              fi
            - |
              # Run security linting on affected projects
              for PROJECT in $AFFECTED_PROJECTS; do
                echo "Running security analysis for: $PROJECT"

                # ESLint security rules
                pnpm nx run $PROJECT:lint --fix=false || echo "Lint issues found in $PROJECT"

                # Check for hardcoded secrets in code
                if command -v trufflehog >/dev/null 2>&1; then
                  trufflehog filesystem apps/$PROJECT --json > /tmp/$PROJECT-secrets.json || echo "TruffleHog scan completed for $PROJECT"
                fi
              done
        - name: Dependency Security Audit
          commands:
            - |
              if [ "$SKIP_PR_SECURITY" = "true" ]; then
                echo "No affected projects, skipping dependency audit"
                exit 0
              fi
            - |
              # Check for known vulnerabilities in dependencies
              echo "Running dependency security audit..."
              pnpm audit --audit-level moderate || echo "Dependency vulnerabilities found"

              # Generate audit report
              pnpm audit --json > /tmp/dependency-audit.json || echo "Audit report generated"
        - name: License Compliance Check
          commands:
            - |
              if [ "$SKIP_PR_SECURITY" = "true" ]; then
                echo "No affected projects, skipping license check"
                exit 0
              fi
            - |
              # Check license compatibility
              echo "Checking license compliance..."
              if command -v license-checker >/dev/null 2>&1; then
                license-checker --json > /tmp/license-report.json || echo "License check completed"
              else
                echo "License checker not available, skipping"
              fi
  - name: PR Container Security Preview
    skip:
      when: "pull_request !~ '.*'"
    dependencies:
      - PR Code Security Scan
    task:
      prologue:
        commands:
          - artifact pull workflow pr-security.env
          - artifact pull workflow pr-affected.env
          - source pr-security.env
          - source pr-affected.env
      secrets:
        - name: Docker Registry
      jobs:
        - name: Build PR Images
          commands:
            - |
              if [ "$SKIP_PR_SECURITY" = "true" ]; then
                echo "No affected projects, skipping PR image build"
                exit 0
              fi
            - |
              # Build images for affected projects with PR tag
              for PROJECT in $AFFECTED_PROJECTS; do
                echo "Building PR image for: $PROJECT"

                # Build with PR-specific tag
                docker build -f apps/$PROJECT/Dockerfile \
                  -t "registry.passiontech.dev/$PROJECT:pr-$SEMAPHORE_GIT_PR_NUMBER" \
                  . || echo "Failed to build $PROJECT"
              done
        - name: Quick Security Scan
          commands:
            - |
              if [ "$SKIP_PR_SECURITY" = "true" ]; then
                echo "No affected projects, skipping quick security scan"
                exit 0
              fi
            - |
              # Quick security scan on PR images
              for PROJECT in $AFFECTED_PROJECTS; do
                echo "Quick security scan for: $PROJECT"

                # Basic Trivy scan (faster, fewer checks)
                trivy image --exit-code 0 --severity HIGH,CRITICAL \
                  --format json \
                  -o "/tmp/$PROJECT-pr-security.json" \
                  "registry.passiontech.dev/$PROJECT:pr-$SEMAPHORE_GIT_PR_NUMBER" || echo "Security scan completed for $PROJECT"
              done
  - name: PR Security Report
    skip:
      when: "pull_request !~ '.*'"
    dependencies:
      - PR Container Security Preview
    task:
      prologue:
        commands:
          - artifact pull workflow pr-security.env
          - artifact pull workflow pr-affected.env
          - source pr-security.env
          - source pr-affected.env
      jobs:
        - name: Generate Security Summary
          commands:
            - |
              if [ "$SKIP_PR_SECURITY" = "true" ]; then
                echo "No affected projects, skipping security report"
                exit 0
              fi
            - |
              # Create comprehensive security report for PR
              echo "# Security Analysis Report for PR #$SEMAPHORE_GIT_PR_NUMBER" > /tmp/security-report.md
              echo "" >> /tmp/security-report.md
              echo "## Affected Projects" >> /tmp/security-report.md
              echo "$AFFECTED_PROJECTS" >> /tmp/security-report.md
              echo "" >> /tmp/security-report.md

              # Summarize findings
              echo "## Security Scan Summary" >> /tmp/security-report.md
              for PROJECT in $AFFECTED_PROJECTS; do
                echo "### $PROJECT" >> /tmp/security-report.md
                if [ -f "/tmp/$PROJECT-pr-security.json" ]; then
                  VULNERABILITIES=$(jq '.Results[].Vulnerabilities | length' /tmp/$PROJECT-pr-security.json 2>/dev/null || echo "0")
                  echo "- Container vulnerabilities: $VULNERABILITIES" >> /tmp/security-report.md
                fi
              done

              # Display report
              cat /tmp/security-report.md
